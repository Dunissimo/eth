/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../hardhat/typechain-types/common";

export declare namespace Store {
  export type ProductStruct = { name: string; price: BigNumberish };

  export type ProductStructOutput = [name: string, price: bigint] & {
    name: string;
    price: bigint;
  };
}

export interface StoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyProduct"
      | "createProduct"
      | "erc20"
      | "getAllProductsIds"
      | "getOneProduct"
      | "getProducts"
      | "owner"
      | "usersProducts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProduct",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllProductsIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOneProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProducts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usersProducts",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProductsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOneProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersProducts",
    data: BytesLike
  ): Result;
}

export interface Store extends BaseContract {
  connect(runner?: ContractRunner | null): Store;
  waitForDeployment(): Promise<this>;

  interface: StoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyProduct: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  createProduct: TypedContractMethod<
    [id: BigNumberish, name: string, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  erc20: TypedContractMethod<[], [string], "view">;

  getAllProductsIds: TypedContractMethod<[], [bigint[]], "view">;

  getOneProduct: TypedContractMethod<
    [id: BigNumberish],
    [Store.ProductStructOutput],
    "view"
  >;

  getProducts: TypedContractMethod<[], [bigint[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  usersProducts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyProduct"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<
    [id: BigNumberish, name: string, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllProductsIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOneProduct"
  ): TypedContractMethod<
    [id: BigNumberish],
    [Store.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProducts"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usersProducts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../hardhat/typechain-types/common";
import type { Store, StoreInterface } from "../../../../hardhat/typechain-types/Store";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "erc",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "buyProduct",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "createProduct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllProductsIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getOneProduct",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Store.Product",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProducts",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "usersProducts",
    outputs: [
      {
        internalType: "uint256",
        name: "productIds",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516111503803806111508339818101604052810190610032919061011c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610149565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e9826100be565b9050919050565b6100f9816100de565b811461010457600080fd5b50565b600081519050610116816100f0565b92915050565b600060208284031215610132576101316100b9565b5b600061014084828501610107565b91505092915050565b610ff8806101586000396000f3fe60806040526004361061007b5760003560e01c80638642269e1161004e5780638642269e1461013c5780638c4fab37146101585780638da5cb5b14610195578063c29b2f20146101c05761007b565b806339f52f09146100805780634be35ccb146100bd57806375025380146100e6578063785e9e8614610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610727565b6101eb565b6040516100b49190610776565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df91906108d7565b61021c565b005b3480156100f257600080fd5b506100fb610323565b6040516101089190610a04565b60405180910390f35b34801561011d57600080fd5b5061012661037b565b6040516101339190610a85565b60405180910390f35b61015660048036038101906101519190610aa0565b6103a1565b005b34801561016457600080fd5b5061017f600480360381019061017a9190610aa0565b6104e3565b60405161018c9190610b89565b60405180910390f35b3480156101a157600080fd5b506101aa6105ac565b6040516101b79190610bba565b60405180910390f35b3480156101cc57600080fd5b506101d56105d0565b6040516101e29190610a04565b60405180910390f35b6003602052816000526040600020818154811061020757600080fd5b90600052602060002001600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a190610c32565b60405180910390fd5b6040518060400160405280838152602001828152506001600085815260200190815260200160002060008201518160000190816102e79190610e54565b50602082015181600101559050506002839080600181540180825580915050600190039060005260206000200160009091909190915055505050565b6060600280548060200260200160405190810160405280929190818152602001828054801561037157602002820191906000526020600020905b81548152602001906001019080831161035d575b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190915055600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600101546040518463ffffffff1660e01b815260040161049c93929190610f26565b6020604051808303816000875af11580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610f95565b5050565b6104eb610665565b6001600083815260200190815260200160002060405180604001604052908160008201805461051990610c81565b80601f016020809104026020016040519081016040528092919081815260200182805461054590610c81565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b505050505081526020016001820154815250509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561065b57602002820191906000526020600020905b815481526020019060010190808311610647575b5050505050905090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106be82610693565b9050919050565b6106ce816106b3565b81146106d957600080fd5b50565b6000813590506106eb816106c5565b92915050565b6000819050919050565b610704816106f1565b811461070f57600080fd5b50565b600081359050610721816106fb565b92915050565b6000806040838503121561073e5761073d610689565b5b600061074c858286016106dc565b925050602061075d85828601610712565b9150509250929050565b610770816106f1565b82525050565b600060208201905061078b6000830184610767565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107e48261079b565b810181811067ffffffffffffffff82111715610803576108026107ac565b5b80604052505050565b600061081661067f565b905061082282826107db565b919050565b600067ffffffffffffffff821115610842576108416107ac565b5b61084b8261079b565b9050602081019050919050565b82818337600083830152505050565b600061087a61087584610827565b61080c565b90508281526020810184848401111561089657610895610796565b5b6108a1848285610858565b509392505050565b600082601f8301126108be576108bd610791565b5b81356108ce848260208601610867565b91505092915050565b6000806000606084860312156108f0576108ef610689565b5b60006108fe86828701610712565b935050602084013567ffffffffffffffff81111561091f5761091e61068e565b5b61092b868287016108a9565b925050604061093c86828701610712565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61097b816106f1565b82525050565b600061098d8383610972565b60208301905092915050565b6000602082019050919050565b60006109b182610946565b6109bb8185610951565b93506109c683610962565b8060005b838110156109f75781516109de8882610981565b97506109e983610999565b9250506001810190506109ca565b5085935050505092915050565b60006020820190508181036000830152610a1e81846109a6565b905092915050565b6000819050919050565b6000610a4b610a46610a4184610693565b610a26565b610693565b9050919050565b6000610a5d82610a30565b9050919050565b6000610a6f82610a52565b9050919050565b610a7f81610a64565b82525050565b6000602082019050610a9a6000830184610a76565b92915050565b600060208284031215610ab657610ab5610689565b5b6000610ac484828501610712565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b07578082015181840152602081019050610aec565b60008484015250505050565b6000610b1e82610acd565b610b288185610ad8565b9350610b38818560208601610ae9565b610b418161079b565b840191505092915050565b60006040830160008301518482036000860152610b698282610b13565b9150506020830151610b7e6020860182610972565b508091505092915050565b60006020820190508181036000830152610ba38184610b4c565b905092915050565b610bb4816106b3565b82525050565b6000602082019050610bcf6000830184610bab565b92915050565b600082825260208201905092915050565b7f416363657373206572726f720000000000000000000000000000000000000000600082015250565b6000610c1c600c83610bd5565b9150610c2782610be6565b602082019050919050565b60006020820190508181036000830152610c4b81610c0f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c9957607f821691505b602082108103610cac57610cab610c52565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610d147fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610cd7565b610d1e8683610cd7565b95508019841693508086168417925050509392505050565b6000610d51610d4c610d47846106f1565b610a26565b6106f1565b9050919050565b6000819050919050565b610d6b83610d36565b610d7f610d7782610d58565b848454610ce4565b825550505050565b600090565b610d94610d87565b610d9f818484610d62565b505050565b5b81811015610dc357610db8600082610d8c565b600181019050610da5565b5050565b601f821115610e0857610dd981610cb2565b610de284610cc7565b81016020851015610df1578190505b610e05610dfd85610cc7565b830182610da4565b50505b505050565b600082821c905092915050565b6000610e2b60001984600802610e0d565b1980831691505092915050565b6000610e448383610e1a565b9150826002028217905092915050565b610e5d82610acd565b67ffffffffffffffff811115610e7657610e756107ac565b5b610e808254610c81565b610e8b828285610dc7565b600060209050601f831160018114610ebe5760008415610eac578287015190505b610eb68582610e38565b865550610f1e565b601f198416610ecc86610cb2565b60005b82811015610ef457848901518255600182019150602085019450602081019050610ecf565b86831015610f115784890151610f0d601f891682610e1a565b8355505b6001600288020188555050505b505050505050565b6000606082019050610f3b6000830186610bab565b610f486020830185610bab565b610f556040830184610767565b949350505050565b60008115159050919050565b610f7281610f5d565b8114610f7d57600080fd5b50565b600081519050610f8f81610f69565b92915050565b600060208284031215610fab57610faa610689565b5b6000610fb984828501610f80565b9150509291505056fea264697066735822122001e7873fd218572f4484cdfbacf9e226cd25c1ee87a87d7b2901107d7b5349f464736f6c634300081c0033";

type StoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Store__factory extends ContractFactory {
  constructor(...args: StoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    erc: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(erc, overrides || {});
  }
  override deploy(
    erc: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(erc, overrides || {}) as Promise<
      Store & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Store__factory {
    return super.connect(runner) as Store__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StoreInterface {
    return new Interface(_abi) as StoreInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Store {
    return new Contract(address, _abi, runner) as unknown as Store;
  }
}

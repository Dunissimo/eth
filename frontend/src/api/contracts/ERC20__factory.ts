/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../hardhat/typechain-types/common";
import type { ERC20, ERC20Interface } from "../../../../hardhat/typechain-types/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recepient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516118be3803806118be83398181016040528101906100329190610264565b82600390816100419190610510565b5081600490816100519190610510565b5080600560006101000a81548160ff021916908360ff16021790555033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506105e2565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61011d826100d4565b810181811067ffffffffffffffff8211171561013c5761013b6100e5565b5b80604052505050565b600061014f6100b6565b905061015b8282610114565b919050565b600067ffffffffffffffff82111561017b5761017a6100e5565b5b610184826100d4565b9050602081019050919050565b60005b838110156101af578082015181840152602081019050610194565b60008484015250505050565b60006101ce6101c984610160565b610145565b9050828152602081018484840111156101ea576101e96100cf565b5b6101f5848285610191565b509392505050565b600082601f830112610212576102116100ca565b5b81516102228482602086016101bb565b91505092915050565b600060ff82169050919050565b6102418161022b565b811461024c57600080fd5b50565b60008151905061025e81610238565b92915050565b60008060006060848603121561027d5761027c6100c0565b5b600084015167ffffffffffffffff81111561029b5761029a6100c5565b5b6102a7868287016101fd565b935050602084015167ffffffffffffffff8111156102c8576102c76100c5565b5b6102d4868287016101fd565b92505060406102e58682870161024f565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061034157607f821691505b602082108103610354576103536102fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261037f565b6103c6868361037f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061040d610408610403846103de565b6103e8565b6103de565b9050919050565b6000819050919050565b610427836103f2565b61043b61043382610414565b84845461038c565b825550505050565b600090565b610450610443565b61045b81848461041e565b505050565b5b8181101561047f57610474600082610448565b600181019050610461565b5050565b601f8211156104c4576104958161035a565b61049e8461036f565b810160208510156104ad578190505b6104c16104b98561036f565b830182610460565b50505b505050565b600082821c905092915050565b60006104e7600019846008026104c9565b1980831691505092915050565b600061050083836104d6565b9150826002028217905092915050565b610519826102ef565b67ffffffffffffffff811115610532576105316100e5565b5b61053c8254610329565b610547828285610483565b600060209050601f83116001811461057a5760008415610568578287015190505b61057285826104f4565b8655506105da565b601f1984166105888661035a565b60005b828110156105b05784890151825560018201915060208501945060208101905061058b565b868310156105cd57848901516105c9601f8916826104d6565b8355505b6001600288020188555050505b505050505050565b6112cd806105f16000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461018f5780638da5cb5b146101bf57806395d89b41146101dd5780639dc29fac146101fb578063a9059cbb14610217578063dd62ed3e14610247576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce5671461015557806340c10f1914610173575b600080fd5b6100c1610277565b6040516100ce9190610d74565b60405180910390f35b6100f160048036038101906100ec9190610e2f565b610305565b6040516100fe9190610e8a565b60405180910390f35b61010f610479565b60405161011c9190610eb4565b60405180910390f35b61013f600480360381019061013a9190610ecf565b61047f565b60405161014c9190610e8a565b60405180910390f35b61015d610771565b60405161016a9190610f3e565b60405180910390f35b61018d60048036038101906101889190610e2f565b610784565b005b6101a960048036038101906101a49190610f59565b6108ec565b6040516101b69190610eb4565b60405180910390f35b6101c7610904565b6040516101d49190610f95565b60405180910390f35b6101e561092a565b6040516101f29190610d74565b60405180910390f35b61021560048036038101906102109190610e2f565b6109b8565b005b610231600480360381019061022c9190610e2f565b610b20565b60405161023e9190610e8a565b60405180910390f35b610261600480360381019061025c9190610fb0565b610cbf565b60405161026e9190610eb4565b60405180910390f35b600380546102849061101f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b09061101f565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610389576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103809061109c565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104679190610eb4565b60405180910390a36001905092915050565b60005481565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fa90611108565b60405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156105c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b990611174565b60405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461064e91906111c3565b9250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106a491906111c3565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106fa91906111f7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161075e9190610eb4565b60405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90611277565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461086391906111f7565b925050819055508060008082825461087b91906111f7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516108e09190610eb4565b60405180910390a35050565b60016020528060005260406000206000915090505481565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600480546109379061101f565b80601f01602080910402602001604051908101604052809291908181526020018280546109639061101f565b80156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b505050505081565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f90611277565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a9791906111c3565b9250508190555080600080828254610aaf91906111c3565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b149190610eb4565b60405180910390a35050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b9061109c565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bf391906111c3565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c4991906111f7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cad9190610eb4565b60405180910390a36001905092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1e578082015181840152602081019050610d03565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d4682610ce4565b610d508185610cef565b9350610d60818560208601610d00565b610d6981610d2a565b840191505092915050565b60006020820190508181036000830152610d8e8184610d3b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dc682610d9b565b9050919050565b610dd681610dbb565b8114610de157600080fd5b50565b600081359050610df381610dcd565b92915050565b6000819050919050565b610e0c81610df9565b8114610e1757600080fd5b50565b600081359050610e2981610e03565b92915050565b60008060408385031215610e4657610e45610d96565b5b6000610e5485828601610de4565b9250506020610e6585828601610e1a565b9150509250929050565b60008115159050919050565b610e8481610e6f565b82525050565b6000602082019050610e9f6000830184610e7b565b92915050565b610eae81610df9565b82525050565b6000602082019050610ec96000830184610ea5565b92915050565b600080600060608486031215610ee857610ee7610d96565b5b6000610ef686828701610de4565b9350506020610f0786828701610de4565b9250506040610f1886828701610e1a565b9150509250925092565b600060ff82169050919050565b610f3881610f22565b82525050565b6000602082019050610f536000830184610f2f565b92915050565b600060208284031215610f6f57610f6e610d96565b5b6000610f7d84828501610de4565b91505092915050565b610f8f81610dbb565b82525050565b6000602082019050610faa6000830184610f86565b92915050565b60008060408385031215610fc757610fc6610d96565b5b6000610fd585828601610de4565b9250506020610fe685828601610de4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103757607f821691505b60208210810361104a57611049610ff0565b5b50919050565b7f4e6f7420656e6f75676820616d6f756e74000000000000000000000000000000600082015250565b6000611086601183610cef565b915061109182611050565b602082019050919050565b600060208201905081810360008301526110b581611079565b9050919050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b60006110f2601283610cef565b91506110fd826110bc565b602082019050919050565b60006020820190508181036000830152611121816110e5565b9050919050565b7f4e6f7420656e6f75676820616c6c6f77616e6365000000000000000000000000600082015250565b600061115e601483610cef565b915061116982611128565b602082019050919050565b6000602082019050818103600083015261118d81611151565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111ce82610df9565b91506111d983610df9565b92508282039050818111156111f1576111f0611194565b5b92915050565b600061120282610df9565b915061120d83610df9565b925082820190508082111561122557611224611194565b5b92915050565b7f4f6e6c79206f776e65722063616e20646f207468697300000000000000000000600082015250565b6000611261601683610cef565b915061126c8261122b565b602082019050919050565b6000602082019050818103600083015261129081611254565b905091905056fea2646970667358221220b48f661ca4d9e37553841a17a3c54391868124bc7fb59e38bc0f604205a2737564736f6c634300081c0033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      overrides || {}
    );
  }
  override deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<
      ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20__factory {
    return super.connect(runner) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20 {
    return new Contract(address, _abi, runner) as unknown as ERC20;
  }
}
